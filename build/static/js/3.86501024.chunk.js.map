{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css"],"names":["checkoutSummary","props","className","classes","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutContinue","checkoutCancelled","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipcode","minLength","maxLength","country","email","isEmail","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","inputIdentifiers","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutContinueHandler","history","replace","checkoutCancelHandler","goBack","summary","to","purchasedRedirect","purchased","path","match","component","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","option","Label","label","module","exports"],"mappings":"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","file":"static/js/3.86501024.chunk.js","sourcesContent":["import React from 'react';\r\nimport classes from './CheckoutSummary.module.css';\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\n\r\nconst checkoutSummary = ( props ) => {\r\n    return (\r\n        <div className={classes.CheckoutSummary}>\r\n            <h1> We hope it tastes well!</h1> \r\n            <div style={{width: '100%', margin: 'auto'}}>\r\n            <Burger ingredients={props.ingredients} />\r\n            </div>\r\n            <Button btnType='Success'clicked={props.checkoutContinue}> Continue </Button>\r\n            <Button btnType='Danger' clicked={props.checkoutCancelled}> Cancel </Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default checkoutSummary;","import React, { Component } from 'react';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport classes from './ContactData.module.css';\r\nimport axios from '../../../axios-orders';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport { connect } from 'react-redux';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../../store/actions/index';\r\nimport { updateObject, checkValidity } from '../../../shared/utility';\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm:{\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            zipcode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Zipcode'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6,\r\n                    maxLength:6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'E-Mail'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        {value: 'fastest', displayValue: 'Fastest'},\r\n                        {value: 'cheapest', displayValue: 'Cheapest'}\r\n                    ]\r\n                },\r\n                value: 'fastest',\r\n                validation: {},\r\n                valid: true,\r\n            }\r\n        },\r\n        formIsValid: false\r\n    }\r\n\r\n    orderHandler = (event) => {\r\n        event.preventDefault();\r\n        const formData = {};\r\n        for(let formElementIdentifier in this.state.orderForm) {\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n        }\r\n        const order = {\r\n            ingredients: this.props.ings,\r\n            price: this.props.price,\r\n            orderData: formData,\r\n            userId: this.props.userId\r\n        }\r\n        this.props.onOrderBurger(order, this.props.token);\r\n    }\r\n\r\n    inputChangedHandler = (event, inputIdentifier) =>{\r\n        const updatedFormElement =updateObject(this.state.orderForm[inputIdentifier], {\r\n            value: event.target.value,\r\n            valid: checkValidity( event.target.value, this.state.orderForm[inputIdentifier].validation),\r\n            touched: true\r\n        });\r\n        const updatedOrderForm = updateObject(this.state.orderForm ,{\r\n            [inputIdentifier]:updatedFormElement\r\n        });\r\n        let formIsValid = true;\r\n        for(let inputIdentifiers in updatedOrderForm) {\r\n            formIsValid = updatedOrderForm[inputIdentifiers].valid && formIsValid;\r\n        }\r\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\r\n    }\r\n    \r\n    render () {\r\n        const formElementsArray = [];\r\n        for(let key in this.state.orderForm) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            });\r\n        }\r\n        let form = (\r\n                <form onSubmit={this.orderHandler}>\r\n                    {formElementsArray.map(formElement => (\r\n                        <Input\r\n                        key={formElement.id} \r\n                        elementType={formElement.config.elementType}\r\n                        elementConfig={formElement.config.elementConfig}\r\n                        value={formElement.config.value}\r\n                        invalid={!formElement.config.valid}\r\n                        shouldValidate={formElement.config.validation}\r\n                        touched={formElement.config.touched} \r\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)}/>\r\n                    ))}\r\n                    <Button btnType='Success' disabled={!this.state.formIsValid}> Order </Button>\r\n                </form>\r\n        );\r\n        if(this.props.loading){\r\n            form = <Spinner />;\r\n        }\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your Contact Info </h4>\r\n                {form}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return{\r\n    onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\r\n    };\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, { Component } from 'react';\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport ContactData from './ContactData/ContactData';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nclass Checkout extends Component {\r\n\r\n    checkoutContinueHandler = () => {\r\n        this.props.history.replace('/checkout/contact-data');\r\n    }\r\n\r\n    checkoutCancelHandler = () => {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    render() {\r\n        let summary = <Redirect to='/' />;\r\n        if(this.props.ings){\r\n            const purchasedRedirect = this.props.purchased ? <Redirect to='/' /> : null;\r\n            summary = <div>\r\n                {purchasedRedirect}\r\n                <CheckoutSummary \r\n                ingredients={this.props.ings} \r\n                checkoutContinue={this.checkoutContinueHandler}\r\n                checkoutCancelled={this.checkoutCancelHandler} />\r\n                <Route \r\n                path={this.props.match.path + '/contact-data'} \r\n                component={ContactData} />\r\n                </div>;\r\n        }\r\n        return summary;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        purchased: state.order.purchased\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Checkout);","import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst input = (props)  => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n    switch( props.elementType ) {\r\n        case( 'input' ):\r\n            inputElement = <input \r\n            className={inputClasses.join(' ')}\r\n            {...props.elementConfig}\r\n            value={props.value}\r\n            onChange={props.changed} />\r\n            break;\r\n        case ( 'textarea' ):\r\n            inputElement = <textarea\r\n            className={inputClasses.join(' ')}\r\n            {...props.elementConfig}\r\n            value={props.value} \r\n            onChange={props.changed}/>\r\n            break;\r\n        case ( 'select' ):\r\n            inputElement = (\r\n            <select\r\n            className={inputClasses.join(' ')}\r\n            value={props.value} \r\n            onChange={props.changed} >\r\n                {props.elementConfig.options.map(option => (\r\n                    <option key={option.value} value={option.value}> {option.displayValue} </option>\r\n                ))} \r\n            </select>\r\n            );\r\n            break;\r\n\r\n        default:\r\n            inputElement = <input \r\n            className={inputClasses.join(' ')}\r\n            {...props.elementConfig}\r\n            value={props.value} />\r\n    }\r\n\r\n    return(\r\n    <div className={classes.Input}>\r\n        <label className={classes.Label}> {props.label} </label>\r\n        {inputElement}\r\n    </div>\r\n)};\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2iH9x\",\"Label\":\"Input_Label__15Zwp\",\"InputElement\":\"Input_InputElement__2Ypzq\",\"Invalid\":\"Input_Invalid__1z3LG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__10Uab\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__ZqVMq\"};"],"sourceRoot":""}